/*
What Is An Exception? :->) exception Is an error event generated during the execution of webdriver test case or java software 
program which disrupts test execution In between. Exception can arise due to the many reasons like, network connection or 
hardware failure, Invalid data entered by user, DB server down etc.. So all these things can happens any time when you run 
your selenium webdriver test case and we can not stop It. So Instead of thinking about stopping exception(Which Is not possible) 
during run time, Think about handling exceptions. Java software development language provides very good exception handling mechanism 
to recover from this kind of errors. Let us learn different ways of handling exception In java.
*/

/*
There are two types of exceptions In java as bellow.

1. Checked Exception :
Checked exceptions are those exceptions which are checked during compile time and needs catch block to caught that exception during 
compilation. If compiler will not find catch block then It will throw compilation error. Very simple example of checked exception 
Is using Thread.sleep(5000); statement In your java software program code. If you will not put this statement Inside try catch block 
then It will not allow you to compile your java software program.

2. Unchecked Exceptions :
Unchecked exception are those exception which are not checked during compile time. Generally checked exceptions occurred due to the 
error In code during run time. Simplest example of unchecked exception Is int i = 4/0;. This statement will throws  / by zero 
exception during run time of java software program.

Handling exceptions using try-catch block
We need to place try catch block around that code which might generate exception. In bellow given example, System.out.println(a[9]); 
Is written Intentionally to generate an exception. If you see, that statement Is written Inside try block so If that statement throw 
an exception - catch block can caught and handle It.
*/

/*Handling exceptions using try-catch block
We need to place try catch block around that code which might generate exception. In bellow given example, System.out.println(a[9]); 
Is written Intentionally to generate an exception. If you see, that statement Is written Inside try block so If that statement throw 
an exception - catch block can caught and handle It.
*/

public class Handle_exce {

 public static void main(String[] args) {
  int a[] = {3,1,6};
  try { //If any exception arise Inside this try block, Control will goes to catch block.
                         System.out.println("Before Exception"); 
                         //unchecked exception         
                         System.out.println(a[9]);//Exception will arise here because we have only 3 values In array.
                         System.out.println("After Exception");
  }catch(Exception e){
   System.out.println("Exception Is "+e);   
  }
               System.out.println("Outside The try catch.");
 }
}







